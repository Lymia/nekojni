use crate::{generate_precompiled, NativeClassWrapper};
use std::{
    collections::HashMap,
    io::{Cursor, Write},
};
use zip::{write::FileOptions, ZipWriter};

#[derive(Debug)]
pub struct ClassData {
    class_info: HashMap<String, Vec<u8>>,
    resources: HashMap<String, Vec<u8>>,
    loader_name: Option<String>,
}
impl ClassData {
    pub fn new() -> Self {
        ClassData {
            class_info: Default::default(),
            resources: Default::default(),
            loader_name: None,
        }
    }

    pub(crate) fn add_class(&mut self, name: &str, data: impl Into<Vec<u8>>) {
        self.class_info.insert(name.to_string(), data.into());
    }

    pub fn add_null_loader(&mut self, name: &str) {
        assert!(self.loader_name.is_none());
        self.class_info
            .insert(name.to_string(), generate_precompiled::generate_null_loader(name));
        self.loader_name = Some(name.to_string());
    }
    pub fn add_resource_loader(
        &mut self,
        name: &str,
        crate_name: &str,
        crate_version: &str,
        image_resource_path: &str,
    ) {
        assert!(self.loader_name.is_none());
        self.class_info.insert(
            name.to_string(),
            generate_precompiled::generate_resource_loader(
                name,
                crate_name,
                crate_version,
                image_resource_path,
            ),
        );
        self.loader_name = Some(name.to_string());
    }

    pub fn add_module_loader(&mut self, name: &str) {
        assert!(self.loader_name.is_some());
        self.class_info.insert(
            name.to_string(),
            generate_precompiled::generate_module_init_wrapper(
                name,
                self.loader_name.as_deref().unwrap(),
            ),
        );
    }
    pub fn add_exported_class(&mut self, exported: NativeClassWrapper) {
        exported.add_to_jar(self);
    }

    pub fn add_resource(&mut self, name: &str, data: Vec<u8>) {
        self.resources.insert(name.to_string(), data);
    }

    pub fn make_jar(&self) -> Vec<u8> {
        let mut writer = ZipWriter::new(Cursor::new(Vec::<u8>::new()));

        writer.set_comment("generated by nekojni");
        for (name, data) in &self.class_info {
            writer
                .start_file(&format!("{name}.class"), FileOptions::default())
                .unwrap();
            writer.write_all(data).unwrap();
        }
        for (name, data) in &self.resources {
            writer.start_file(name, FileOptions::default()).unwrap();
            writer.write_all(data).unwrap();
        }

        writer.finish().unwrap().into_inner()
    }
}
